[{"path":"/articles/customizations.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Using D3po with Customizations","text":"Let’s start loading packages.","code":"library(d3po)"},{"path":"/articles/customizations.html","id":"pokemon-dataset","dir":"Articles","previous_headings":"","what":"Pokemon dataset","title":"Using D3po with Customizations","text":"included dataset, pokemon, detailed documentation let’s explore data structure:","code":"str(pokemon) #> Classes 'tbl_df', 'tbl' and 'data.frame':    151 obs. of  15 variables: #>  $ id             : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ name           : chr  \"Bulbasaur\" \"Ivysaur\" \"Venusaur\" \"Charmander\" ... #>  $ height         : num  0.7 1 2 0.6 1.1 1.7 0.5 1 1.6 0.3 ... #>  $ weight         : num  6.9 13 100 8.5 19 90.5 9 22.5 85.5 2.9 ... #>  $ base_experience: int  64 142 236 62 142 240 63 142 239 39 ... #>  $ type_1         : Factor w/ 15 levels \"Bug\",\"Dragon\",..: 8 8 8 6 6 6 15 15 15 1 ... #>  $ type_2         : Factor w/ 11 levels \"Fairy\",\"Fighting\",..: 7 7 7 NA NA 3 NA NA NA NA ... #>  $ attack         : int  49 62 82 52 64 84 48 63 83 30 ... #>  $ defense        : int  49 63 83 43 58 78 65 80 100 35 ... #>  $ hp             : int  45 60 80 39 58 78 44 59 79 45 ... #>  $ special_attack : int  65 80 100 60 80 109 50 65 85 20 ... #>  $ special_defense: int  65 80 100 50 65 85 64 80 105 20 ... #>  $ speed          : int  45 60 80 65 80 100 43 58 78 45 ... #>  $ color_1        : Factor w/ 15 levels \"#6890F0\",\"#7038F8\",..: 4 4 4 13 13 13 1 1 1 8 ... #>  $ color_2        : Factor w/ 11 levels \"#6890F0\",\"#78C850\",..: 4 4 4 NA NA 5 NA NA NA NA ..."},{"path":"/articles/customizations.html","id":"box-and-whiskers-with-custom-axis-labels-and-axis-units","dir":"Articles","previous_headings":"","what":"Box and whiskers with custom axis labels and axis units","title":"Using D3po with Customizations","text":"","code":"pokemon_custom <- pokemon pokemon_custom$weight_g <- pokemon_custom$weight * 1000  d3po(pokemon_custom, width = 800, height = 600) %>%   po_box(daes(x = type_1, y = weight_g, color = color_1)) %>%   po_format(     x = toupper(type_1),     y = format(weight_g, big.mark = \" \", scientific = FALSE)   ) %>%   po_labels(     x = \"Pokemon Type (uppercase)\",     y = \"Weight (grams)\",     title = \"Weight Distribution by Type\"   ) d3po(pokemon_custom, width = 800, height = 600) %>%   po_box(daes(x = weight_g, y = type_1, color = color_1)) %>%   po_format(     x = format(weight_g, big.mark = \" \", scientific = FALSE),     y = toupper(type_1)   ) %>%   po_labels(     x = \"Weight (grams)\",     y = \"Pokemon Type (uppercase)\",     title = \"Weight Distribution by Type\"   )"},{"path":"/articles/customizations.html","id":"bar-with-custom-axis-labels-and-axis-units","dir":"Articles","previous_headings":"","what":"Bar with custom axis labels and axis units","title":"Using D3po with Customizations","text":"","code":"dout <- aggregate(weight ~ type_1 + color_1, data = pokemon, FUN = mean) names(dout) <- c(\"type\", \"color\", \"avg_weight\")  d3po(dout, width = 800, height = 600) %>%   po_bar(daes(x = type, y = avg_weight, color = color)) %>%   po_format(     x = toupper(type),     y = round(avg_weight, 2)   ) %>%   po_labels(     x = \"Type\",     y = \"Mean Weight\",     title = \"Vertical Bars\"   ) d3po(dout, width = 800, height = 600) %>%   po_bar(daes(x = avg_weight, y = type, color = color)) %>%   po_format(     x = round(avg_weight, 2),     y = toupper(type)   ) %>%   po_labels(     x = \"Mean Weight\",     y = \"Type\",     title = \"Horizontal Bars\"   )"},{"path":"/articles/customizations.html","id":"treemap-with-custom-labels-and-tooltip","dir":"Articles","previous_headings":"","what":"Treemap with custom labels and tooltip","title":"Using D3po with Customizations","text":"","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_treemap(     daes(       size = count, group = type, color = color, tiling = \"squarify\"     )   ) %>%   po_labels(     align = \"center-middle\",     title = \"Share of Pokemon by main type\"   ) %>%   po_tooltip(\"<i>Type: {type}<\/i><br/>Count: {count}\")"},{"path":"/articles/customizations.html","id":"treemap-with-custom-labels-and-tooltip-more-changes-to-the-displayed-labels","dir":"Articles","previous_headings":"","what":"Treemap with custom labels and tooltip (more changes to the displayed labels)","title":"Using D3po with Customizations","text":"","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_treemap(     daes(       size = count, group = type, color = color, tiling = \"squarify\"     )   ) %>%   po_labels(     align = \"center-middle\",     title = \"Share of Pokemon by main type\",     labels = JS(       \"function(percentage, row) {         var pct = (percentage).toFixed(1) + '%';         var name = (row && (row.type || row.name)) ? (row.type || row.name) : '';         var count = row && (row.count != null ? row.count : (row.value != null ? row.value : ''));         return '<i>' + name + '<\/i><br/>Count: ' + (count || '') + '<br/>Share: ' + pct;       }\"     )   ) %>%   po_tooltip(\"<i>Type: {type}<\/i><br/>Count: {count}\")"},{"path":"/articles/customizations.html","id":"two-level-treemap-with-custom-labels-and-tooltip","dir":"Articles","previous_headings":"","what":"Two-level Treemap with custom labels and tooltip","title":"Using D3po with Customizations","text":"","code":"type2tmp <- as.character(pokemon$type_2) type2tmp[is.na(type2tmp)] <- \"only\" dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + type2tmp + color_1,   data = pokemon, FUN = length ) names(dout) <- c(\"type1\", \"type2\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_treemap(     daes(       size = count, group = type1, subgroup = type2, color = color, tiling = \"squarify\"     )   ) %>%   po_labels(     align = \"center-middle\",     title = \"Two-level Treemap by Type 1 and Type 2 (click to drill in/out)\",     subtitle = JS(       \"function(_v, row) {         // row.mode is 'aggregated' | 'flat' | 'drilled'         if (row && row.mode === 'drilled') return 'Displaying Sub-Type';         return 'Displaying Main Type';\\       }\"     )   ) %>%   po_tooltip(JS(     \"function(percentage, row) {        var pct = (percentage).toFixed(1) + '%';         // Minimal tooltip: rely on row.count and explicit row.type1 / row.type2        var count = row && row.count != null ? row.count : '';         if (!row || !row.type2) {          var t1 = row && (row.type1 || row.name) ? (row.type1 || row.name) : '';          return '<i>Type 1: ' + t1 + '<\/i><br/>Count: ' + count + '<br/>Percentage: ' + pct;        }         // When type2 is the placeholder 'only', hide the Type 2 row in the tooltip        if (row.type2 === 'only') {          return '<i>Type 1: ' + (row.type1 || '') + '<\/i><br/>Count: ' + count + '<br/>Percentage: ' + pct;        }         return '<i>Type 1: ' + (row.type1 || '') + '<br/>Type 2: ' + (row.type2 || '') + '<\/i><br/>Count: ' + count + '<br/>Percentage: ' + pct;      }\"   ))"},{"path":"/articles/customizations.html","id":"pie-with-custom-labels-and-tooltip","dir":"Articles","previous_headings":"","what":"Pie with custom labels and tooltip","title":"Using D3po with Customizations","text":"","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_pie(daes(size = count, group = type, color = color)) %>%   po_tooltip(\"<b>Type: {type}<\/b><br/>Count: {count}\") %>%   po_labels(title = \"Full Pie\")"},{"path":"/articles/customizations.html","id":"line-with-custom-axis-labels","dir":"Articles","previous_headings":"","what":"Line with custom axis labels","title":"Using D3po with Customizations","text":"","code":"dout <- pokemon[pokemon$name %in% c(   \"Squirtle\", \"Wartortle\", \"Blastoise\",   \"Charmander\", \"Charmeleon\", \"Charizard\",   \"Pikachu\", \"Raichu\" ), c(\"name\", \"height\", \"weight\", \"type_1\", \"color_1\")]  colnames(dout) <- c(\"pokemon\", \"height\", \"weight\", \"type\", \"color\")  d3po(dout, width = 800, height = 600) %>%   po_line(     daes(       x = height, y = weight, group = type, name = pokemon, color = color     )   ) %>%   po_labels(     x = \"Height (m)\",     y = \"Weight (kg)\",     title = \"Pokemon Evolution: Weight vs Height by Type\"   ) %>%   po_tooltip(\"<b>{pokemon} ({type})<\/b><br/>(height, weight) = ({height}, {weight})\")"},{"path":"/articles/customizations.html","id":"area-with-custom-axis-labels-and-custom-tooltip","dir":"Articles","previous_headings":"","what":"Area with custom axis labels and custom tooltip","title":"Using D3po with Customizations","text":"","code":"dout <- pokemon[pokemon$name %in% c(   \"Squirtle\", \"Wartortle\", \"Blastoise\",   \"Charmander\", \"Charmeleon\", \"Charizard\",   \"Pikachu\", \"Raichu\" ), c(\"name\", \"height\", \"weight\", \"type_1\", \"color_1\")]  colnames(dout) <- c(\"pokemon\", \"height\", \"weight\", \"type\", \"color\")  d3po(dout, width = 800, height = 600) %>%   po_area(     daes(       x = height, y = weight, group = type, name = pokemon, color = color     )   ) %>%   po_labels(     x = \"Height (m)\",     y = \"Weight (kg)\",     title = \"Pokemon Evolution: Weight vs Height by Type\"   ) %>%   po_tooltip(\"<b>{pokemon} ({type})<\/b><br/>(height, weight) = ({height}, {weight})\")"},{"path":"/articles/customizations.html","id":"scatterplot-with-custom-tooltip","dir":"Articles","previous_headings":"","what":"Scatterplot with custom tooltip","title":"Using D3po with Customizations","text":"","code":"d3po(pokemon, width = 800, height = 600) %>%   po_scatter(     daes(       x = height, y = weight, group = name, color = color_1     )   ) %>%   po_labels(title = \"Height vs Weight\") %>%   po_tooltip(\"<b>{name}<\/b><br/>(height, weight) = ({height}, {weight})\")"},{"path":"/articles/customizations.html","id":"geomap-with-custom-tooltip","dir":"Articles","previous_headings":"","what":"Geomap with custom tooltip","title":"Using D3po with Customizations","text":"","code":"# Get country IDs and names from the South America map dout <- map_ids(d3po::maps$south_america$continent)  # Chile has Mewtwo and Guyana has Mew dout$pokemon_count <- ifelse(dout$id == \"CL\", 1L, 0L) dout$pokemon_count <- ifelse(dout$id == \"GY\", 1L, dout$pokemon_count) dout$color <- ifelse(dout$id %in% c(\"CL\", \"GY\"), \"#F85888\", \"#e0e0e0\")  d3po(dout, width = 800, height = 600) %>%   po_geomap(     daes(group = id, color = color, size = pokemon_count, tooltip = name),     map = d3po::maps$south_america$continent   ) %>%   po_labels(title = \"Pokemon Distribution in South America\") %>%   po_tooltip(\"<b>Country: {name}<\/b><br/>Pokemon Count: {pokemon_count}\")"},{"path":"/articles/customizations.html","id":"network-with-custom-tooltip","dir":"Articles","previous_headings":"","what":"Network with custom tooltip","title":"Using D3po with Customizations","text":"","code":"# Using KK layout algorithm d3po(pokemon_network, width = 800, height = 600) %>%   po_network(daes(size = node_size, color = color, layout = \"kk\")) %>%   po_labels(title = \"Pokemon Type Network (Fixed Positions)\") %>%   po_tooltip(\"{name} node size: {node_size}\")"},{"path":"/articles/customizations.html","id":"change-labels-position-background-font-and-disable-download-button","dir":"Articles","previous_headings":"","what":"Change labels position, background, font, and disable download button","title":"Using D3po with Customizations","text":"Going back treemap example, possible move labels, change background, also use font like:","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_treemap(daes(size = count, group = type, color = color)) %>%   po_labels(     align = \"center-middle\", # default is \"left-top\"     title = \"Share of Pokemon by main type\"   ) %>%   po_background(\"#ffcc00\") %>%   po_font(\"Comic Sans MS\", 16, \"uppercase\") %>%   po_download(FALSE) # default is TRUE"},{"path":"/articles/defaults.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Using D3po with Default Settings","text":"Let’s start loading packages.","code":"library(d3po)"},{"path":"/articles/defaults.html","id":"pokemon-dataset","dir":"Articles","previous_headings":"","what":"Pokemon dataset","title":"Using D3po with Default Settings","text":"included dataset, pokemon, detailed documentation let’s explore data structure:","code":"str(pokemon) #> Classes 'tbl_df', 'tbl' and 'data.frame':    151 obs. of  15 variables: #>  $ id             : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ name           : chr  \"Bulbasaur\" \"Ivysaur\" \"Venusaur\" \"Charmander\" ... #>  $ height         : num  0.7 1 2 0.6 1.1 1.7 0.5 1 1.6 0.3 ... #>  $ weight         : num  6.9 13 100 8.5 19 90.5 9 22.5 85.5 2.9 ... #>  $ base_experience: int  64 142 236 62 142 240 63 142 239 39 ... #>  $ type_1         : Factor w/ 15 levels \"Bug\",\"Dragon\",..: 8 8 8 6 6 6 15 15 15 1 ... #>  $ type_2         : Factor w/ 11 levels \"Fairy\",\"Fighting\",..: 7 7 7 NA NA 3 NA NA NA NA ... #>  $ attack         : int  49 62 82 52 64 84 48 63 83 30 ... #>  $ defense        : int  49 63 83 43 58 78 65 80 100 35 ... #>  $ hp             : int  45 60 80 39 58 78 44 59 79 45 ... #>  $ special_attack : int  65 80 100 60 80 109 50 65 85 20 ... #>  $ special_defense: int  65 80 100 50 65 85 64 80 105 20 ... #>  $ speed          : int  45 60 80 65 80 100 43 58 78 45 ... #>  $ color_1        : Factor w/ 15 levels \"#6890F0\",\"#7038F8\",..: 4 4 4 13 13 13 1 1 1 8 ... #>  $ color_2        : Factor w/ 11 levels \"#6890F0\",\"#78C850\",..: 4 4 4 NA NA 5 NA NA NA NA ..."},{"path":"/articles/defaults.html","id":"box-and-whiskers","dir":"Articles","previous_headings":"","what":"Box and Whiskers","title":"Using D3po with Default Settings","text":"Box plots useful visualizing distributions comparing across categories. can create vertical horizontal box plots switching x y axes:","code":""},{"path":"/articles/defaults.html","id":"weight-distribution-by-type","dir":"Articles","previous_headings":"Box and Whiskers","what":"Weight Distribution by Type","title":"Using D3po with Default Settings","text":"","code":"d3po(pokemon, width = 800, height = 600) %>%   po_box(daes(x = type_1, y = weight, color = color_1)) %>%   po_labels(title = \"Weight Distribution by Type\")"},{"path":"/articles/defaults.html","id":"height-distribution-by-type-horizontal","dir":"Articles","previous_headings":"Box and Whiskers","what":"Height Distribution by Type (Horizontal)","title":"Using D3po with Default Settings","text":"","code":"d3po(pokemon, width = 800, height = 600) %>%   po_box(daes(x = height, y = type_1, color = color_1)) %>%   po_labels(title = \"Height Distribution by Type\")"},{"path":"/articles/defaults.html","id":"log-transformed-distributions","dir":"Articles","previous_headings":"Box and Whiskers","what":"Log-Transformed Distributions","title":"Using D3po with Default Settings","text":"data large ranges, log transformations can useful:","code":"# Add log-transformed columns pokemon$log_weight <- log10(pokemon$weight) pokemon$log_height <- log10(pokemon$height)  d3po(pokemon, width = 800, height = 600) %>%   po_box(daes(x = type_1, y = log_weight, color = color_1)) %>%   po_labels(title = \"Log(Weight) Distribution by Type\") d3po(pokemon, width = 800, height = 600) %>%   po_box(daes(x = log_height, y = type_1, color = color_1)) %>%   po_labels(title = \"Log(Height) Distribution by Type\")"},{"path":"/articles/defaults.html","id":"bar","dir":"Articles","previous_headings":"","what":"Bar","title":"Using D3po with Default Settings","text":"Bar charts can oriented vertically horizontally switching x y axes:","code":""},{"path":"/articles/defaults.html","id":"vertical-bars","dir":"Articles","previous_headings":"Bar","what":"Vertical Bars","title":"Using D3po with Default Settings","text":"","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_bar(daes(x = type, y = count, color = color)) %>%   po_labels(title = \"Vertical Bars\")"},{"path":"/articles/defaults.html","id":"horizontal-bars","dir":"Articles","previous_headings":"Bar","what":"Horizontal Bars","title":"Using D3po with Default Settings","text":"","code":"d3po(dout, width = 800, height = 600) %>%   po_bar(daes(x = count, y = type, color = color)) %>%   po_labels(title = \"Horizontal Bars\")"},{"path":"/articles/defaults.html","id":"treemap","dir":"Articles","previous_headings":"","what":"Treemap","title":"Using D3po with Default Settings","text":"plot share Pokemon type, need indicate variables size, group, (optionally) color. can also specify tiling method (squarify, binary, slice, dice):","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_treemap(daes(size = count, group = type, color = color, tiling = \"squarify\")) %>%   po_labels(title = \"Share of Pokemon by main type\")"},{"path":"/articles/defaults.html","id":"two-level-treemap","dir":"Articles","previous_headings":"","what":"Two-level Treemap","title":"Using D3po with Default Settings","text":"can also build two-level treemap specifying subgroup aesthetic. lets click top-level type drill second-level types, click background go back:","code":"type2tmp <- as.character(pokemon$type_2) type2tmp[is.na(type2tmp)] <- \"only\" dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + type2tmp + color_1,   data = pokemon, FUN = length ) names(dout) <- c(\"type1\", \"type2\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_treemap(     daes(       size = count, group = type1, subgroup = type2, color = color, tiling = \"squarify\"     )   ) %>%   po_labels(title = \"Two-level Treemap by Type 1 and Type 2 (click to drill in/out)\")"},{"path":"/articles/defaults.html","id":"pie-donut","dir":"Articles","previous_headings":"","what":"Pie / Donut","title":"Using D3po with Default Settings","text":"Use plots caution polar coordinates major perceptual problems. Use EXTREME caution. can customize pie charts innerRadius (0 full pie) angles (startAngle endAngle). four common variations:","code":""},{"path":"/articles/defaults.html","id":"pie","dir":"Articles","previous_headings":"Pie / Donut","what":"Pie","title":"Using D3po with Default Settings","text":"complete pie chart inner radius:","code":"dout <- aggregate(cbind(count = rep(1, nrow(pokemon))) ~ type_1 + color_1, data = pokemon, FUN = length) names(dout) <- c(\"type\", \"color\", \"count\")  d3po(dout, width = 800, height = 600) %>%   po_pie(daes(size = count, group = type, color = color)) %>%   po_labels(title = \"Full Pie\")"},{"path":"/articles/defaults.html","id":"donut","dir":"Articles","previous_headings":"Pie / Donut","what":"Donut","title":"Using D3po with Default Settings","text":"pie inner radius creating “donut hole”:","code":"d3po(dout, width = 800, height = 600) %>%   po_pie(daes(size = count, group = type, color = color, innerRadius = 0.4)) %>%   po_labels(title = \"Donut\")"},{"path":"/articles/defaults.html","id":"half-pie","dir":"Articles","previous_headings":"Pie / Donut","what":"Half Pie","title":"Using D3po with Default Settings","text":"semicircular pie chart:","code":"d3po(dout, width = 800, height = 600) %>%   po_pie(     daes(       size = count, group = type, color = color, startAngle = -pi / 2, endAngle = pi / 2     )   ) %>%   po_labels(title = \"Half Pie\")"},{"path":"/articles/defaults.html","id":"half-donut","dir":"Articles","previous_headings":"Pie / Donut","what":"Half Donut","title":"Using D3po with Default Settings","text":"semicircular donut chart:","code":"d3po(dout, width = 800, height = 600) %>%   po_pie(     daes(       size = count, group = type, color = color, innerRadius = 0.4, startAngle = -pi / 2, endAngle = pi / 2     )   ) %>%   po_labels(title = \"Half Donut\")"},{"path":"/articles/defaults.html","id":"line","dir":"Articles","previous_headings":"","what":"Line","title":"Using D3po with Default Settings","text":"Line charts great showing trends evolution continuous variables. can plot multiple series specifying group color aesthetics:","code":"dout <- pokemon[pokemon$name %in% c(   \"Squirtle\", \"Wartortle\", \"Blastoise\",   \"Charmander\", \"Charmeleon\", \"Charizard\",   \"Pikachu\", \"Raichu\" ), c(\"height\", \"weight\", \"type_1\", \"color_1\")]  colnames(dout) <- c(\"height\", \"weight\", \"type\", \"color\")  d3po(dout, width = 800, height = 600) %>%   po_line(     daes(       x = height, y = weight, group = type, color = color     )   ) %>%   po_labels(title = \"Pokemon Evolution: Weight vs Height by Type\")"},{"path":"/articles/defaults.html","id":"area","dir":"Articles","previous_headings":"","what":"Area","title":"Using D3po with Default Settings","text":"Area charts similar line charts filled areas. can also stack multiple series:","code":"dout <- pokemon[pokemon$name %in% c(   \"Squirtle\", \"Wartortle\", \"Blastoise\",   \"Charmander\", \"Charmeleon\", \"Charizard\",   \"Pikachu\", \"Raichu\" ), c(\"height\", \"weight\", \"type_1\", \"color_1\")]  colnames(dout) <- c(\"height\", \"weight\", \"type\", \"color\")   d3po(dout, width = 800, height = 600) %>%   po_area(     daes(       x = height, y = weight, group = type, color = color     ),     stack = FALSE   ) %>%   po_labels(title = \"Pokemon Evolution: Weight vs Height by Type (Area)\")"},{"path":"/articles/defaults.html","id":"scatterplot","dir":"Articles","previous_headings":"","what":"Scatterplot","title":"Using D3po with Default Settings","text":"Scatter plots show relationship two continuous variables. can also control point size represent third dimension:","code":""},{"path":"/articles/defaults.html","id":"height-vs-weight","dir":"Articles","previous_headings":"Scatterplot","what":"Height vs Weight","title":"Using D3po with Default Settings","text":"","code":"d3po(pokemon, width = 800, height = 600) %>%   po_scatter(     daes(       x = height, y = weight, group = name, color = color_1     )   ) %>%   po_labels(title = \"Height vs Weight\")"},{"path":"/articles/defaults.html","id":"logheight-vs-logweight","dir":"Articles","previous_headings":"Scatterplot","what":"Log(Height) vs Log(Weight)","title":"Using D3po with Default Settings","text":"","code":"# Add log-transformed columns if not already present if (!\"log_height\" %in% names(pokemon)) {   pokemon$log_height <- log10(pokemon$height)   pokemon$log_weight <- log10(pokemon$weight) }  d3po(pokemon, width = 800, height = 600) %>%   po_scatter(     daes(       x = log_height, y = log_weight, group = name, color = color_1     )   ) %>%   po_labels(title = \"Log(Height) vs Log(Weight)\")"},{"path":"/articles/defaults.html","id":"with-size-encoding","dir":"Articles","previous_headings":"Scatterplot","what":"With Size Encoding","title":"Using D3po with Default Settings","text":"can use point size show close Pokemon mean:","code":"# Calculate inverse distance from mean (closer = larger circles) mean_weight <- mean(pokemon$weight, na.rm = TRUE) mean_height <- mean(pokemon$height, na.rm = TRUE)  pokemon$distance_from_mean_weight <- abs(pokemon$weight - mean_weight) pokemon$distance_from_mean_height <- abs(pokemon$height - mean_height) pokemon$avg_distance <- (pokemon$distance_from_mean_weight + pokemon$distance_from_mean_height) / 2 pokemon$inverse_distance_from_mean <- 1 / (pokemon$avg_distance + 0.01)  d3po(pokemon, width = 800, height = 600) %>%   po_scatter(     daes(       x = height, y = weight, size = inverse_distance_from_mean,       group = name, color = color_1     )   ) %>%   po_labels(title = \"Height vs Weight (Size = 1 / Distance from the Mean)\") d3po(pokemon, width = 800, height = 600) %>%   po_scatter(     daes(       x = log_height, y = log_weight, size = inverse_distance_from_mean,       group = name, color = color_1     )   ) %>%   po_labels(title = \"Log(Height) vs Log(Weight) (Size = 1 / Distance from the Mean)\")"},{"path":"/articles/defaults.html","id":"geomap","dir":"Articles","previous_headings":"","what":"Geomap","title":"Using D3po with Default Settings","text":"Geographic maps allow visualize data across regions. need specify TopoJSON map data matching region IDs:","code":"# Get country IDs and names from the South America map dout <- map_ids(d3po::maps$south_america$continent)  # Chile has Mewtwo and Guyana has Mew dout$pokemon_count <- ifelse(dout$id == \"CL\", 1L, 0L) dout$pokemon_count <- ifelse(dout$id == \"GY\", 1L, dout$pokemon_count) dout$color <- ifelse(dout$id %in% c(\"CL\", \"GY\"), \"#F85888\", \"#e0e0e0\")  d3po(dout, width = 800, height = 600) %>%   po_geomap(     daes(       group = id, color = color, size = pokemon_count,       tooltip = name     ),     map = d3po::maps$south_america$continent   ) %>%   po_labels(title = \"Pokemon Distribution in South America\") # Get region IDs and names from the Chile map dout <- map_ids(d3po::maps$south_america$chile)  # Only Magallanes has Pokemon (Mewtwo lives there!) dout$pokemon_count <- ifelse(dout$id == \"MA\", 1L, 0L) dout$color <- ifelse(dout$id == \"MA\", \"#F85888\", \"#e0e0e0\")  d3po(dout, width = 800, height = 600) %>%   po_geomap(     daes(       group = id, color = color, size = pokemon_count,       tooltip = name     ),     map = d3po::maps$south_america$chile   ) %>%   po_labels(title = \"Pokemon Distribution in Chile\")"},{"path":"/articles/defaults.html","id":"network","dir":"Articles","previous_headings":"","what":"Network","title":"Using D3po with Default Settings","text":"Network graphs show relationships entities. pokemon_network dataset contains nodes (Pokemon types) links (connections type_1 type_2). Node size represents count type. default, nodes fixed positions. can enable dragging move = TRUE: created pokemon_network dataset:","code":"# Using KK layout algorithm d3po(pokemon_network, width = 800, height = 600) %>%   po_network(daes(size = node_size, color = color, layout = \"kk\")) %>%   po_labels(title = \"Pokemon Type Network (KK Layout)\") # Using FR layout algorithm d3po(pokemon_network, width = 800, height = 600) %>%   po_network(daes(size = node_size, color = color, layout = \"fr\")) %>%   po_labels(title = \"Pokemon Type Network (FR Layout)\") # Use manual positions (from pokemon_network$layout) d3po(pokemon_network, width = 800, height = 600) %>%   po_network(daes(size = node_size, color = color)) %>%   po_labels(title = \"Pokemon Type Network (Manual Positions)\") load_all() library(dplyr) library(igraph)  pokemon_network_1 <- pokemon %>%   filter(!is.na(type_2)) %>%   group_by(type_1, type_2) %>%   summarise(edge_size = n(), .groups = \"drop\") %>%   rename(     from = type_1,     to = type_2   )  # Create vertices WITH x/y coordinates pokemon_network_2 <- pokemon %>%   group_by(type = type_1, color = color_1) %>%   summarise(node_size = n(), .groups = \"drop\") %>%   bind_rows(     pokemon %>%       group_by(type = type_2, color = color_2) %>%       summarise(node_size = n(), .groups = \"drop\")   ) %>%   filter(!is.na(type)) %>%   group_by(type, color) %>%   summarise(node_size = sum(node_size), .groups = \"drop\")  # Create a single network object with manual coordinates pokemon_network <- igraph::graph_from_data_frame(   d = pokemon_network_1,   vertices = pokemon_network_2,   directed = FALSE )  pokemon_network$layout <- igraph::layout_with_kk(pokemon_network) rownames(pokemon_network$layout) <- V(pokemon_network)$name colnames(pokemon_network$layout) <- c(\"x\", \"y\")  # Manually optimize layout to minimize edge crossings # Place Flying at center since it's the biggest hub pokemon_network$layout[\"Flying\", ] <- c(0, 0)  # Place types that connect to Flying in a circle around it # Top: Dragon, Electric, Fire pokemon_network$layout[\"Dragon\", ] <- c(2, 1.5) pokemon_network$layout[\"Electric\", ] <- c(1, 2) pokemon_network$layout[\"Fire\", ] <- c(-1, 2)  # Right side: Steel (connects to Electric), Rock, Ground cluster pokemon_network$layout[\"Steel\", ] <- c(2, 2.2) pokemon_network$layout[\"Rock\", ] <- c(1.5, -1) pokemon_network$layout[\"Ground\", ] <- c(0.5, -2)  # Bottom: Ice (connects to Flying, Water, Psychic) pokemon_network$layout[\"Ice\", ] <- c(-1, -2) pokemon_network$layout[\"Water\", ] <- c(-2, -1)  # Left side: Poison cluster (connects to Bug, Ghost, Grass, Flying, Ground, Water) pokemon_network$layout[\"Poison\", ] <- c(-2, 0) pokemon_network$layout[\"Bug\", ] <- c(-2.4, 1) pokemon_network$layout[\"Grass\", ] <- c(-3, 0) pokemon_network$layout[\"Ghost\", ] <- c(-2.5, -0.9)  # Top left: Normal, Fairy (Normal connects to Flying and Fairy) pokemon_network$layout[\"Normal\", ] <- c(-1.5, 1.5) pokemon_network$layout[\"Fairy\", ] <- c(-2.5, 2)  # Left side: Psychic (connects to Grass, Ice, Water, Fairy) pokemon_network$layout[\"Psychic\", ] <- c(-3, -1.5)  # Near Water: Fighting (only connects to Water) pokemon_network$layout[\"Fighting\", ] <- c(-1.5, -1.5)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mauricio Vargas Sepulveda. Author, maintainer, copyright holder. John Coene. Author. Ariel Alvarado. Contributor. Sylvain Lesage. Contributor. Curran Kelleher. Contributor. Fernando Becerra. Contributor. Natural Earth. Data contributor. R Consortium. Funder.           Funded 2016-2017 ISC grants cycle","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vargas Sepulveda M, Coene J (2025). d3po: Fast Beautiful Interactive Visualization 'Markdown' 'Shiny'. R package version 1.0.0, https://pacha.dev/d3po/.","code":"@Manual{,   title = {d3po: Fast and Beautiful Interactive Visualization for 'Markdown' and 'Shiny'},   author = {Mauricio {Vargas Sepulveda} and John Coene},   year = {2025},   note = {R package version 1.0.0},   url = {https://pacha.dev/d3po/}, }"},{"path":[]},{"path":"/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"Fast and Beautiful Interactive Visualization for Markdown and Shiny","text":"D3po’s goal provide ---box beautiful visualizations minimum time coding effort final user. acts intermediate layer user Shiny D3 providing “templates”, enabling high quality interactive visualizations. D3po essentially set templates D3 version 7.0+ permissive licence (Apache 2.0) can used R Shiny applications via htmlwidgets. package features highcharter, aims cost free alternative without imposing commercial license NGOs government use. project useful , please consider supporting development buying coffee https://buymeacoffee.com/pacha.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Fast and Beautiful Interactive Visualization for Markdown and Shiny","text":"Visualization methods: Area (distribution) chart Box whiskers Column charts (horizontal vertical) Donut chart Geographical maps Line charts Networks Pie chart Scatterplots Treemaps Enhancements: Automatic content resizing Downloading charts SVG format Downloading charts PNG format","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and Beautiful Interactive Visualization for Markdown and Shiny","text":"can install recent version R-Universe: GitHub using remotes:","code":"install.packages(\"d3po\", repos = \"https://pachadotdev.r-universe.dev\") remotes::install_github(\"pachadotdev/d3po\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Fast and Beautiful Interactive Visualization for Markdown and Shiny","text":"video current features D3po: example consisting creation box whiskers plot: Please check vignettes comprehensive example Shiny app using Golem: https://github.com/pachadotdev/d3po/tree/main/d3podemo. minimal Shiny app without Golem use debug : https://github.com/pachadotdev/d3po/blob/main/debug--shiny.R.","code":"d3po(pokemon) %>%   po_box(daes(x = type_1, y = speed, color = color_1)) %>%   po_title(\"Distribution of Pokemon speed by main type\")"},{"path":"/reference/d3po-exports.html","id":null,"dir":"Reference","previous_headings":"","what":"D3po (re)exported methods — d3po-exports","title":"D3po (re)exported methods — d3po-exports","text":"D3po (re)exported methods","code":""},{"path":"/reference/d3po-shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny bindings for 'd3po' — d3po-shiny","title":"Shiny bindings for 'd3po' — d3po-shiny","text":"Output render functions using d3po within Shiny applications interactive Rmd documents.","code":""},{"path":"/reference/d3po-shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny bindings for 'd3po' — d3po-shiny","text":"","code":"d3po_output(output_id, width = \"100%\", height = \"400px\")  render_d3po(expr, env = parent.frame(), quoted = FALSE)  d3po_proxy(id, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/d3po-shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny bindings for 'd3po' — d3po-shiny","text":"output_id output variable read width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. expr expression generates d3po object env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable. id Id plot create proxy . session valid shiny session.","code":""},{"path":"/reference/d3po-shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny bindings for 'd3po' — d3po-shiny","text":"Creates basic 'htmlwidget' object 'Shiny' interactive documents","code":""},{"path":"/reference/d3po.html","id":null,"dir":"Reference","previous_headings":"","what":"An htmlwidget interface to the d3po javascript chart library — d3po","title":"An htmlwidget interface to the d3po javascript chart library — d3po","text":"Apache licensed alternative 'Highcharter' provides functions fast beautiful interactive visualization 'Markdown' 'Shiny'. function provides 'd3po' methods R console","code":""},{"path":"/reference/d3po.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An htmlwidget interface to the d3po javascript chart library — d3po","text":"","code":"d3po(data = NULL, ..., width = NULL, height = NULL, elementId = NULL)"},{"path":"/reference/d3po.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An htmlwidget interface to the d3po javascript chart library — d3po","text":"data d3po need explicit specified data objects formatted JSON, parameter passed R. ... Aesthetics pass, see daes() width Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended. height width parameter. elementId Dummy string parameter. Useful two charts page.","code":""},{"path":"/reference/d3po.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An htmlwidget interface to the d3po javascript chart library — d3po","text":"Creates basic 'htmlwidget' object simple visualization","code":""},{"path":[]},{"path":"/reference/d3po.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An htmlwidget interface to the d3po javascript chart library — d3po","text":"Maintainer: Mauricio Vargas Sepulveda m.vargas.sepulveda@gmail.com (ORCID) [copyright holder] Authors: John Coene contributors: Ariel Alvarado [contributor] Sylvain Lesage [contributor] Curran Kelleher [contributor] Fernando Becerra [contributor] Natural Earth [data contributor] R Consortium (Funded 2016-2017 ISC grants cycle) [funder]","code":""},{"path":"/reference/daes.html","id":null,"dir":"Reference","previous_headings":"","what":"Aesthetics — daes","title":"Aesthetics — daes","text":"Aesthetics chart.","code":""},{"path":"/reference/daes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aesthetics — daes","text":"","code":"daes(x, y, ...)"},{"path":"/reference/daes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aesthetics — daes","text":"x, y, ... List name value pairs giving aesthetics map variables. names x y aesthetics typically omitted common; aspects must named.","code":""},{"path":"/reference/daes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aesthetics — daes","text":"Aesthetics plots axis (x,y), group, color /size","code":""},{"path":"/reference/daes.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Aesthetics — daes","text":"Valid aesthetics (depending geom) x, y: cartesian coordinates. group: grouping data. subgroup: subgrouping data (treemaps). name: name data. color: color geom. size: size geom. layout: layout geom (nicely, fr, kk, graphopt, drl, lgl, mds, sugiyama), quotes.","code":""},{"path":"/reference/map_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the IDs from a Map — map_ids","title":"Extract the IDs from a Map — map_ids","text":"Extract IDs Map","code":""},{"path":"/reference/map_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the IDs from a Map — map_ids","text":"","code":"map_ids(map)"},{"path":"/reference/map_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the IDs from a Map — map_ids","text":"map map object","code":""},{"path":"/reference/map_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the IDs from a Map — map_ids","text":"tibble containing IDs names","code":""},{"path":"/reference/map_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the IDs from a Map — map_ids","text":"","code":"map <- map_ids(maps$south_america$continent)"},{"path":"/reference/maps.html","id":null,"dir":"Reference","previous_headings":"","what":"maps — maps","title":"maps — maps","text":"World, continent country maps. maps provided R lists structured following 'topojson' standard. maps organized sub-lists continent provide maps continents countries. missing states regions found original maps.","code":""},{"path":"/reference/maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"maps — maps","text":"","code":"maps"},{"path":"/reference/maps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"maps — maps","text":"list object 6 elements (one per continent). Americas separated North America South America.","code":""},{"path":"/reference/maps.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"maps — maps","text":"Adapted Natural Earth.","code":""},{"path":"/reference/maps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"maps — maps","text":"Missing Asia: 'Siachen Glacier (JK)', 'Scarborough Reef (SH)', 'Spratly Islands (SP)'. Missing Europe: 'Vatican City (VA)'. Missing North America: 'Bajo Nuevo Bank (BU)', 'Serranilla Bank (SW)', 'United States Minor Outlying Islands (UM)'. Missing Oceania: 'Federated States Micronesia (FM)', 'Marshall Islands (MH)', 'Tuvalu (TV)'. Consider maps referential unofficial.","code":""},{"path":"/reference/po_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Area — po_area","title":"Area — po_area","text":"Plot area chart.","code":""},{"path":"/reference/po_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area — po_area","text":"","code":"po_area(d3po, ..., data = NULL, inherit_daes = TRUE, stack = FALSE)"},{"path":"/reference/po_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area — po_area","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified. stack Whether stack series.","code":""},{"path":"/reference/po_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area — po_area","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area — po_area","text":"","code":"if (interactive()) {   dout <- pokemon[pokemon$name %in% c(     \"Squirtle\", \"Wartortle\", \"Blastoise\",     \"Charmander\", \"Charmeleon\", \"Charizard\",     \"Pikachu\", \"Raichu\"   ), c(\"height\", \"weight\", \"type_1\", \"color_1\")]    colnames(dout) <- c(\"height\", \"weight\", \"type\", \"color\")    d3po(dout) %>%     po_area(daes(       x = height, y = weight, group = type, color = color     )) %>%     po_title(\"Pokemon Evolution: Weight vs Height by Type\") }"},{"path":"/reference/po_background.html","id":null,"dir":"Reference","previous_headings":"","what":"Background — po_background","title":"Background — po_background","text":"Add background chart.","code":""},{"path":"/reference/po_background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Background — po_background","text":"","code":"po_background(d3po, background = \"#fff\")"},{"path":"/reference/po_background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Background — po_background","text":"d3po Either output d3po() d3po_proxy(). background background add (hex code).","code":""},{"path":"/reference/po_background.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Background — po_background","text":"Appends custom background 'htmlwidgets' object","code":""},{"path":"/reference/po_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar — po_bar","title":"Bar — po_bar","text":"Draw bar chart.","code":""},{"path":"/reference/po_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar — po_bar","text":"","code":"po_bar(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar — po_bar","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar — po_bar","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar — po_bar","text":"","code":"if (interactive()) {   dout <- aggregate(pokemon$name, by = list(     type = pokemon$type_1,     color = pokemon$color_1   ), FUN = length)    colnames(dout)[3] <- \"count\"    # Vertical bars   d3po(dout) %>%     po_bar(daes(x = type, y = count, color = color)) %>%     po_title(\"Vertical Bars\")    # Horizontal bars (flipped axes)   d3po(dout) %>%     po_bar(daes(x = count, y = type, color = color)) %>%     po_title(\"Horizontal Bars\") }"},{"path":"/reference/po_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot — po_box","title":"Boxplot — po_box","text":"Draw boxplot.","code":""},{"path":"/reference/po_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot — po_box","text":"","code":"po_box(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot — po_box","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot — po_box","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot — po_box","text":"","code":"if (interactive()) {   # Vertical box plot   d3po(pokemon) %>%     po_box(daes(x = type_1, y = weight, color = color_1)) %>%     po_title(\"Weight Distribution by Type\")    # Horizontal box plot   d3po(pokemon) %>%     po_box(daes(x = height, y = type_1, color = color_1)) %>%     po_title(\"Height Distribution by Type\")    # Log-transformed distribution   pokemon$log_weight <- log10(pokemon$weight)   d3po(pokemon) %>%     po_box(daes(x = type_1, y = log_weight, color = color_1)) %>%     po_title(\"Log(Weight) Distribution by Type\") }"},{"path":"/reference/po_donut.html","id":null,"dir":"Reference","previous_headings":"","what":"Donut — po_donut","title":"Donut — po_donut","text":"Plot donut","code":""},{"path":"/reference/po_donut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Donut — po_donut","text":"","code":"po_donut(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_donut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Donut — po_donut","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_donut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Donut — po_donut","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_donut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Donut — po_donut","text":"","code":"if (interactive()) {   dout <- aggregate(pokemon$name, by = list(     type = pokemon$type_1,     color = pokemon$color_1   ), FUN = length)    colnames(dout)[3] <- \"count\"    d3po(dout) %>%     po_donut(daes(       size = count, group = type, color = color,       innerRadius = 0.4, startAngle = 0, endAngle = 2 * pi     )) %>%     po_title(\"Share of Pokemon by main type\") }"},{"path":"/reference/po_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download — po_download","title":"Download — po_download","text":"Show/hide download button.","code":""},{"path":"/reference/po_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download — po_download","text":"","code":"po_download(d3po, show = TRUE)"},{"path":"/reference/po_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download — po_download","text":"d3po 'd3po' 'd3proxy' object. show Logical indicating whether show (TRUE) hide (FALSE) download button.","code":""},{"path":"/reference/po_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download — po_download","text":"Appends download button settings 'htmlwidgets' object","code":""},{"path":"/reference/po_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Font — po_font","title":"Font — po_font","text":"Edit font used chart.","code":""},{"path":"/reference/po_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Font — po_font","text":"","code":"po_font(d3po, family = \"Fira Sans\", size = 16, transform = \"none\")"},{"path":"/reference/po_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Font — po_font","text":"d3po Either output d3po() d3po_proxy(). family family font use (\"Roboto\", \"Merriweather\", etc.). size size use (10, 11, 12, etc. overrides auto-sizing). transform transformation use title (\"lowercase\", \"uppercase\", \"capitalize\", \"none\").","code":""},{"path":"/reference/po_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Font — po_font","text":"Appends custom font 'htmlwidgets' object","code":""},{"path":"/reference/po_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format — po_format","title":"Format — po_format","text":"Precompute formatted label columns expressions attach widget data. Accepts named expressions like x = round(varx, 2) y = format(varY, big.mark = \",\"). formatted columns added d3po$x$data names __label_<name> registered d3po$x$formatted_cols renderer use.","code":""},{"path":"/reference/po_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format — po_format","text":"","code":"po_format(d3po, ...)"},{"path":"/reference/po_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format — po_format","text":"d3po Either output d3po() d3po_proxy(). ... Named formatting expressions (quosures). name correspond aesthetic (e.g. x, y, tooltip, etc.).","code":""},{"path":"/reference/po_geomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Geomap — po_geomap","title":"Geomap — po_geomap","text":"Plot geomap","code":""},{"path":"/reference/po_geomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geomap — po_geomap","text":"","code":"po_geomap(d3po, ..., data = NULL, map = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_geomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geomap — po_geomap","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). map map use (.e., valid list topojson file maps$south_america$chile jsonlite::fromJSON(\"chile.topojson\", simplifyVector = F)) inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_geomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geomap — po_geomap","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_geomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geomap — po_geomap","text":"","code":"if (interactive()) {   # Get region IDs and names from the Chile map   dout <- map_ids(d3po::maps$south_america$chile)    # Only Magallanes has Pokemon (Mewtwo lives there!)   dout$pokemon_count <- ifelse(dout$id == \"MA\", 1L, 0L)   dout$color <- ifelse(dout$id == \"MA\", \"#F85888\", \"#e0e0e0\")    d3po(dout) %>%     po_geomap(       daes(         group = id, color = color, size = pokemon_count,         tooltip = name       ),       map = d3po::maps$south_america$chile     ) %>%     po_title(\"Pokemon Distribution in Chile\") }"},{"path":"/reference/po_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Labels — po_labels","title":"Labels — po_labels","text":"Edit labels positioning treemap.","code":""},{"path":"/reference/po_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labels — po_labels","text":"","code":"po_labels(   d3po,   x = NULL,   y = NULL,   title = NULL,   subtitle = NULL,   labels = NULL,   align = \"left-top\" )"},{"path":"/reference/po_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labels — po_labels","text":"d3po Either output d3po() d3po_proxy(). x Optional x-axis label. y Optional y-axis label. title Optional title chart. subtitle Optional subtitle chart. labels Optional character vector JavaScript function custom label fields treemaps. align Label alignment treemaps. Must one \"left-top\", \"center-middle\", \"right-top\".","code":""},{"path":"/reference/po_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labels — po_labels","text":"Appends custom labels 'htmlwidgets' object","code":""},{"path":"/reference/po_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Line — po_line","title":"Line — po_line","text":"Plot line chart.","code":""},{"path":"/reference/po_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line — po_line","text":"","code":"po_line(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Line — po_line","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Line — po_line","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Line — po_line","text":"","code":"if (interactive()) {   dout <- pokemon[pokemon$name %in% c(     \"Squirtle\", \"Wartortle\", \"Blastoise\",     \"Charmander\", \"Charmeleon\", \"Charizard\",     \"Pikachu\", \"Raichu\"   ), c(\"height\", \"weight\", \"type_1\", \"color_1\")]    colnames(dout) <- c(\"height\", \"weight\", \"type\", \"color\")    d3po(dout) %>%     po_line(daes(       x = height, y = weight, group = type, color = color     )) %>%     po_title(\"Pokemon Evolution: Weight vs Height by Type\") }"},{"path":"/reference/po_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Network — po_network","title":"Network — po_network","text":"Draw network graph showing relationships entities. Requires igraph object nodes (vertices) links (edges). Node size can represent counts metrics.","code":""},{"path":"/reference/po_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network — po_network","text":"","code":"po_network(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network — po_network","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network — po_network","text":"Appends nodes arguments network-specific 'htmlwidgets' object","code":""},{"path":"/reference/po_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network — po_network","text":"","code":"if (interactive()) {   d3po(pokemon_network) %>%     po_network(daes(size = size, color = color, layout = \"kk\")) %>%     po_title(\"Pokemon Type Network\") }"},{"path":"/reference/po_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Pie — po_pie","title":"Pie — po_pie","text":"Plot pie","code":""},{"path":"/reference/po_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pie — po_pie","text":"","code":"po_pie(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pie — po_pie","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_pie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pie — po_pie","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pie — po_pie","text":"","code":"if (interactive()) {   dout <- aggregate(pokemon$name, by = list(     type = pokemon$type_1,     color = pokemon$color_1   ), FUN = length)    colnames(dout)[3] <- \"count\"    d3po(dout) %>%     po_pie(daes(       size = count, group = type, color = color,       innerRadius = 0, startAngle = 0, endAngle = 2 * pi     )) %>%     po_title(\"Share of Pokemon by main type\") }"},{"path":"/reference/po_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"scatter — po_scatter","title":"scatter — po_scatter","text":"Plot scatter chart.","code":""},{"path":"/reference/po_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scatter — po_scatter","text":"","code":"po_scatter(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scatter — po_scatter","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scatter — po_scatter","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scatter — po_scatter","text":"","code":"if (interactive()) {   # Unweighted scatter plot   d3po(pokemon) %>%     po_scatter(daes(       x = height, y = weight, group = name, color = color_1     )) %>%     po_title(\"Height vs Weight\")    # Log-transformed scatter plot   pokemon$log_height <- log10(pokemon$height)   pokemon$log_weight <- log10(pokemon$weight)    d3po(pokemon) %>%     po_scatter(daes(       x = log_height, y = log_weight, group = name, color = color_1     )) %>%     po_title(\"Log(Height) vs Log(Weight)\")    # Weighted scatterplot by inverse distance from mean   mean_weight <- mean(pokemon$weight, na.rm = TRUE)   mean_height <- mean(pokemon$height, na.rm = TRUE)   pokemon$distance_from_mean_weight <- abs(pokemon$weight - mean_weight)   pokemon$distance_from_mean_height <- abs(pokemon$height - mean_height)   pokemon$avg_distance <- (pokemon$distance_from_mean_weight +     pokemon$distance_from_mean_height) / 2   pokemon$inverse_distance_from_mean <- 1 / (pokemon$avg_distance + 0.01)    d3po(pokemon) %>%     po_scatter(daes(       x = height, y = weight, size = inverse_distance_from_mean,       group = name, color = color_1     )) %>%     po_title(\"Height vs Weight (Size = 1 / Distance from the Mean)\") }"},{"path":"/reference/po_tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Tooltip — po_tooltip","title":"Tooltip — po_tooltip","text":"Set custom tooltip template chart. template can literal string (e.g. <b>{name}<\/b><br>Value: {value}) evaluated server-side substituting column values.","code":""},{"path":"/reference/po_tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tooltip — po_tooltip","text":"","code":"po_tooltip(d3po, template)"},{"path":"/reference/po_tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tooltip — po_tooltip","text":"d3po Either output d3po() d3po_proxy(). template character string template formatter expression.","code":""},{"path":"/reference/po_tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tooltip — po_tooltip","text":"Appends tooltip settings 'htmlwidgets' object","code":""},{"path":"/reference/po_treemap.html","id":null,"dir":"Reference","previous_headings":"","what":"Treemap — po_treemap","title":"Treemap — po_treemap","text":"Plot treemap","code":""},{"path":"/reference/po_treemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treemap — po_treemap","text":"","code":"po_treemap(d3po, ..., data = NULL, inherit_daes = TRUE)"},{"path":"/reference/po_treemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treemap — po_treemap","text":"d3po Either output d3po() d3po_proxy(). ... Aesthetics, see daes(). data dataset use plot, overrides data passed d3po(). inherit_daes Whether inherit aesthetics previous specified.","code":""},{"path":"/reference/po_treemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treemap — po_treemap","text":"'htmlwidgets' object desired interactive plot","code":""},{"path":"/reference/po_treemap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treemap — po_treemap","text":"","code":"if (interactive()) {   dout <- aggregate(pokemon$name, by = list(     type = pokemon$type_1,     color = pokemon$color_1   ), FUN = length)    colnames(dout)[3] <- \"count\"    d3po(dout) %>%     po_treemap(daes(size = count, group = type, color = color, tiling = \"squarify\")) %>%     po_title(\"Share of Pokemon by main type\") }"},{"path":"/reference/pokemon.html","id":null,"dir":"Reference","previous_headings":"","what":"pokemon — pokemon","title":"pokemon — pokemon","text":"Statistical information 151 Pokemon Nintendo RPG series.","code":""},{"path":"/reference/pokemon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pokemon — pokemon","text":"","code":"pokemon"},{"path":"/reference/pokemon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pokemon — pokemon","text":"data frame 151 observations 15 variables.","code":""},{"path":"/reference/pokemon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"pokemon — pokemon","text":"Adapted highcharter package.","code":""},{"path":"/reference/pokemon.html","id":"variables","dir":"Reference","previous_headings":"","what":"Variables","title":"pokemon — pokemon","text":"id: Pokedex number. name: Pokedex name. height: Height meters. weight: Weight kilograms. base_experience: much Pokemon battled. type_1: Primary Pokemon type (.e. Grass, Fire Water) type_2: Secondary Pokemon type (.e. Poison, Dragon Ice) attack: much damage Pokemon deals using technique. defense: much damage Pokemon receives hit technique. hp: much damage Pokemon can receive fainting. special_attack: much damage Pokemon deals using special technique. special_defense: much damage Pokemon receives hit special technique. speed: Determines order Pokemon can act battle, speed tied 1st move assigned random. color_1: Hex color code Type 1. color_2: Hex color code Type 2.","code":""},{"path":"/reference/pokemon_network.html","id":null,"dir":"Reference","previous_headings":"","what":"pokemon_network — pokemon_network","title":"pokemon_network — pokemon_network","text":"Connections Pokemon types based Type 1 2.","code":""},{"path":"/reference/pokemon_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pokemon_network — pokemon_network","text":"","code":"pokemon_network"},{"path":"/reference/pokemon_network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pokemon_network — pokemon_network","text":"igraph object 17 vertices (nodes) 26 edges (arcs).","code":""},{"path":"/reference/pokemon_network.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"pokemon_network — pokemon_network","text":"Adapted highcharter package.","code":""},{"path":"/news/index.html","id":"d3po-100","dir":"Changelog","previous_headings":"","what":"d3po 1.0.0","title":"d3po 1.0.0","text":"Option show/hide download buttons. Allows customize background color font. Fully responsive window size changes. Zoomable maps networks. examples use base R. Added full Shiny Golem example app d3podemo folder. Added minimal Shiny example debugging without Golem debug--shiny.R. Migrated D3 7.9.0. Minimal codebase.","code":""},{"path":"/news/index.html","id":"d3po-055","dir":"Changelog","previous_headings":"","what":"d3po 0.5.5","title":"d3po 0.5.5","text":"CRAN release: 2023-06-19 Back pokemon dataset provide simple examples. maps moved back package reduce dependencies. examples use final data frames dplyr codes commented.","code":""},{"path":"/news/index.html","id":"d3po-053","dir":"Changelog","previous_headings":"","what":"d3po 0.5.3","title":"d3po 0.5.3","text":"Moves Freedom House data https://github.com/pachadotdev/freedom. shiny template includes common Shiny tricks good practice.","code":""},{"path":"/news/index.html","id":"d3po-052","dir":"Changelog","previous_headings":"","what":"d3po 0.5.2","title":"d3po 0.5.2","text":"Provides Freedom House data examples drops Pokemon dataset. Includes Shiny project template. Maps moved side package d3pomaps.","code":""},{"path":"/news/index.html","id":"d3po-045","dir":"Changelog","previous_headings":"","what":"d3po 0.4.5","title":"d3po 0.4.5","text":"Provides maps directly R-formatted lists, topjson files inst/","code":""},{"path":"/news/index.html","id":"d3po-040","dir":"Changelog","previous_headings":"","what":"d3po 0.4.0","title":"d3po 0.4.0","text":"Heavily simplifies plotting graph/network objects Allows plot donuts geographic maps","code":""},{"path":"/news/index.html","id":"d3po-033","dir":"Changelog","previous_headings":"","what":"d3po 0.3.3","title":"d3po 0.3.3","text":"Added NEWS.md file track changes package. Added background options font customization labels title. function pass default values maintain compatibility previous version.","code":""},{"path":"/news/index.html","id":"d3po-032","dir":"Changelog","previous_headings":"","what":"d3po 0.3.2","title":"d3po 0.3.2","text":"CRAN release: 2021-09-23 First release CRAN.","code":""}]
